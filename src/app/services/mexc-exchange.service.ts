import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { map, catchError, timeout } from 'rxjs/operators';
import { MexcAdapter, MexcFundingResponse } from '../adapters/mexc.adapter';
import { NormalizedTicker } from '../adapters/binance.adapter';

@Injectable({
  providedIn: 'root'
})
export class MexcExchangeService {

  private readonly baseUrl = 'https://api.mexc.com';
  private readonly fundingEndpoint = '/api/v3/premiumIndex';

  constructor(private http: HttpClient) {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ funding rates —Å MEXC
   */
  getFundingData(): Observable<{ [ticker: string]: NormalizedTicker }> {
    console.log('üîÑ MEXC: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É funding –¥–∞–Ω–Ω—ã—Ö...');

    const url = `${this.baseUrl}${this.fundingEndpoint}`;

    return this.http.get<MexcFundingResponse[]>(url).pipe(
      timeout(10000), // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      map(response => {
        console.log(`‚úÖ MEXC: –ü–æ–ª—É—á–µ–Ω–æ ${response.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);

        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª—ã
        const filteredData = MexcAdapter.filterUsdtPerpetuals(response);
        console.log(`üîç MEXC: –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ USDT –ø–µ—Ä–ø–µ—Ç—É–∞–ª–æ–≤: ${filteredData.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);

        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
        const normalized = MexcAdapter.normalize(filteredData);
        const tickers = Object.keys(normalized);
        
        console.log(`üéØ MEXC: –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${tickers.length} —Ç–∏–∫–µ—Ä–æ–≤:`, tickers.slice(0, 10));
        
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        tickers.slice(0, 3).forEach(ticker => {
          const data = normalized[ticker];
          console.log(`üìä MEXC ${ticker}:`, {
            price: data.price,
            fundingRate: (data.fundingRate * 100).toFixed(4) + '%',
            nextFunding: new Date(data.nextFundingTime).toLocaleTimeString()
          });
        });

        return normalized;
      }),
      catchError(error => {
        console.error('‚ùå MEXC: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ MEXC API';
        
        if (error.name === 'TimeoutError') {
          errorMessage = 'MEXC API: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
        } else if (error.status === 0) {
          errorMessage = 'MEXC API: –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ CORS';
        } else if (error.status === 429) {
          errorMessage = 'MEXC API: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤';
        } else if (error.status >= 500) {
          errorMessage = 'MEXC API: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        } else if (error.status >= 400) {
          errorMessage = `MEXC API: –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ (${error.status})`;
        }

        console.error(`üí• MEXC: ${errorMessage}`, error);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –æ–±—â—É—é –∑–∞–≥—Ä—É–∑–∫—É
        return of({});
      })
    );
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∏–∫–µ—Ä–µ
   */
  getTickerFunding(symbol: string): Observable<NormalizedTicker | null> {
    console.log(`üîÑ MEXC: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${symbol}...`);

    const url = `${this.baseUrl}${this.fundingEndpoint}?symbol=${symbol}USDT`;

    return this.http.get<MexcFundingResponse[]>(url).pipe(
      timeout(5000),
      map(response => {
        if (response && response.length > 0) {
          const normalized = MexcAdapter.normalize(response);
          const ticker = Object.keys(normalized)[0];
          return normalized[ticker] || null;
        }
        return null;
      }),
      catchError(error => {
        console.error(`‚ùå MEXC: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${symbol}:`, error);
        return of(null);
      })
    );
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API MEXC
   */
  checkApiHealth(): Observable<boolean> {
    console.log('üè• MEXC: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API...');

    const url = `${this.baseUrl}${this.fundingEndpoint}?symbol=BTCUSDT`;

    return this.http.get(url).pipe(
      timeout(5000),
      map(() => {
        console.log('‚úÖ MEXC: API –¥–æ—Å—Ç—É–ø–µ–Ω');
        return true;
      }),
      catchError(error => {
        console.error('‚ùå MEXC: API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        return of(false);
      })
    );
  }
}
